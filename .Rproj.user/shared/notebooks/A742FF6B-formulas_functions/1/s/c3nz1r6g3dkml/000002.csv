"0","kevin_ho_var_test = function(ssquared, sigmasquared, n, alpha, test, ...) {"
"0","  lol_no_name = as.numeric(data.frame(unlist(as.list(match.call())[c(""alpha"", ""a"")])[1]))"
"0","  "
"0","  if (missing(alpha)) {"
"0","    alpha = .05"
"0","  }"
"0","  if (alpha > 100) {"
"0","    return(message (""ERROR: Check Alpha!""))"
"0","  }"
"0","  if (alpha >= 1) {"
"0","    alpha = alpha / 100"
"0","  }"
"0","  "
"0","  test_stat = (n - 1) * ssquared / sigmasquared"
"0","  "
"0","  if (test == ""right_tailed"" | test == ""right tail"" | test == ""right"" | test == ""right tailed"" | test == ""greater"" | test == ""greater than"" | test == ""great"" | test == ""more"" | test == "">"") {"
"0","    p_value = 1 - pchisq(q = test_stat, df = n - 1)"
"0","    critical_value = qchisq(p = 1 - alpha, df = n - 1)"
"0","    problem = ""One-Sided, Right Tailed Chi Squared Test"""
"0","  }"
"0","  else if (test == ""left_tailed"" | test == ""left tail"" | test == ""left"" | test == ""left tailed"" | test == ""less"" | test == ""less than"" | test == ""<"") {"
"0","    p_value = pchisq(q = test_stat, df = n - 1)"
"0","    critical_value = qchisq(p = alpha, df = n - 1)"
"0","    problem = ""One-Sided, Left Tailed Chi Squared Test"""
"0","  }"
"0","  else if (test == ""two sided"" | test == ""two_sided"" | test == ""two_tailed"" | test == ""two tailed"" | test == ""both"" | test == ""two"" | test == ""not equal"" | test == ""different"" | test == ""!="" | test == ""not"") {"
"0","    if (pchisq(q = test_stat, df = n - 1) > .5) {"
"0","      p_value = 2 * (1 - pchisq(q = test_stat, df = n - 1))"
"0","    }"
"0","    else if (pchisq(q = test_stat, df = n - 1) < .5) {"
"0","      p_value = 2 * pchisq(q = test_stat, df = n - 1)"
"0","    }"
"0","    problem = ""Two-Sided Chi Squared Test"""
"0","    critical_value_low = qchisq(p = alpha / 2, df = n - 1)"
"0","    critical_value_high = qchisq(p = 1 - (alpha / 2), df = n - 1)"
"0","    critical_value = c(critical_value_low, critical_value_high)"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check Test!""))"
"0","  }"
"0","  if (p_value < alpha) {"
"0","    decision = c(""REJECT the Null. FAIL TO REJECT the Alternative."")"
"0","  }"
"0","  else if (p_value > alpha) {"
"0","    decision = c(""FAIL TO REJECT the Null. REJECT the Alternative."")"
"0","  }"
"0","  names(test_stat) = NULL"
"0","  names(p_value) = NULL"
"0","  results = list(problem, critical_value, test_stat, alpha, p_value, decision)"
"0","  names(results) = c(""Problem"", ""Critical_Value"", ""Test_Statistic"", ""Alpha"", ""P_Value"", ""Decision"")"
"0","  return(results)"
"0","}"
