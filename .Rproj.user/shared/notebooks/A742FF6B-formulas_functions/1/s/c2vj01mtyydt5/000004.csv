"0","kevin_ho_2_sample_prop_test = function(p_hat_A, p_hat_B, alpha, n_A, n_B, test, C, ...) {"
"0","  p_hat_A = as.numeric(data.frame(unlist(as.list(match.call())[c(""p_hat_A"", ""sample_prop_A"")])[1]))"
"0","  p_hat_B = as.numeric(data.frame(unlist(as.list(match.call())[c(""p_hat_B"", ""sample_prop_B"")])[1]))"
"0","  n_A = as.numeric(data.frame(unlist(as.list(match.call())[c(""n_A"", ""nA"")])[1]))"
"0","  n_B = as.numeric(data.frame(unlist(as.list(match.call())[c(""n_B"", ""nB"")])[1]))"
"0","  lol_no_name = as.numeric(data.frame(unlist(as.list(match.call())[c(""alpha"", ""a"")])[1]))"
"0","  if (missing(C)) {"
"0","    C = 0"
"0","  }"
"0","  "
"0","  x_A = p_hat_A * n_A"
"0","  x_B = p_hat_B * n_B"
"0","  "
"0","  p_hat = (x_A + x_B) / (n_A + n_B)"
"0","  test_stat = ((p_hat_A - p_hat_B) - C) / sqrt(p_hat * (1 - p_hat) * (1 / n_A + 1 / n_B))"
"0","  "
"0","  if (missing(alpha)) {"
"0","    alpha = .05"
"0","  }"
"0","  if (alpha > 100) {"
"0","    return(message (""ERROR: Check Alpha!""))"
"0","  }"
"0","  if (alpha >= 1) {"
"0","    alpha = alpha / 100"
"0","  }"
"0","  if (test == ""right_tailed"" | test == ""right tail"" | test == ""right"" | test == ""right tailed"" | test == ""greater"" | test == ""greater than"" | test == ""great"" | test == ""more"" |test == "">"") {"
"0","    p_value = 1 - pnorm(q = test_stat, mean = 0, sd = 1)"
"0","    critical_value = qnorm(p = 1 - alpha, mean = 0, sd = 1)"
"0","    problem = ""One-Sided, Right Tailed Z Test"""
"0","  }"
"0","  else if (test == ""left_tailed"" | test == ""left tail"" | test == ""left"" | test == ""left tailed"" | test == ""less"" | test == ""less than"" | test == ""<"") {"
"0","    p_value = pnorm(q = test_stat, mean = 0, sd = 1)"
"0","    critical_value = qnorm(p = alpha, mean = 0, sd = 1)"
"0","    problem = ""One-Sided, Left Tailed Z Test"""
"0","  }"
"0","  else if (test == ""two sided"" | test == ""two_sided"" | test == ""two_tailed"" | test == ""two tailed"" | test == ""both"" | test == ""two"" | test == ""not equal"" | test == ""different"" | test == ""!="" | test == ""not"") {"
"0","    if (pnorm(q = test_stat, mean = 0, sd = 1) > .5) {"
"0","      p_value = 2 * (1 - pnorm(q = test_stat, mean = 0, sd = 1))"
"0","    }"
"0","    if (pnorm(q = test_stat, mean = 0, sd = 1) < .5) {"
"0","      p_value = 2 * pnorm(q = test_stat, mean = 0, sd = 1)"
"0","    }"
"0","    problem = ""Two-Sided Z Test"""
"0","    critical_value_low = qnorm(p = alpha / 2, mean = 0, sd = 1)"
"0","    critical_value_high = qnorm(p = 1 - (alpha / 2), mean = 0, sd = 1)"
"0","    critical_value = c(critical_value_low, critical_value_high)"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check Test!""))"
"0","  }"
"0","  if (p_value < alpha) {"
"0","    decision = c(""REJECT the Null. FAIL TO REJECT the Alternative."")"
"0","  }"
"0","  if (p_value > alpha) {"
"0","    decision = c(""FAIL TO REJECT the Null. REJECT the Alternative."")"
"0","  }"
"0","  names(test_stat) = NULL"
"0","  names(p_value) = NULL"
"0","  results = list(problem, critical_value, test_stat, alpha, p_value, decision)"
"0","  names(results) = c(""Problem"", ""Critical_Value"", ""Test_Statistic"", ""Alpha"", ""P_Value"", ""Decision"")"
"0","  return(results)"
"0","}"
