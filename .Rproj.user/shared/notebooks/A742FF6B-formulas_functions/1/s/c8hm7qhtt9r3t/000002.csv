"0","kevin_bivar_prob = function(expression, muX, muY, varX, varY, sdX, sdY, cov_x_y, independence, ...) {"
"0","  # muX, muY, sdX, sdY, cov_x_y"
"0","  library(stringr)"
"0","  library(dplyr)"
"0","  muX = as.numeric(data.frame(unlist(as.list(match.call())[c(""muX"", ""mux"", ""meanX"", ""meanx"")])[1]))"
"0","  muY = as.numeric(data.frame(unlist(as.list(match.call())[c(""muY"", ""muy"", ""meanY"", ""meanY"")])[1]))"
"0","  "
"0","  if (missing(varX) & !missing(sdX)) {"
"0","    varX = sdX ^ 2"
"0","  }"
"0","  else if (!missing(varX) & missing(sdX)) {"
"0","    varX = varX"
"0","  }"
"0","  else if (!missing(varX) & !missing(sdX)) {"
"0","    message(""Using varX"")"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Need either varX or sdX!""))"
"0","  }"
"0","  if (missing(varY) & !missing(sdY)) {"
"0","    varY = sdY ^ 2"
"0","  }"
"0","  else if (!missing(varX) & missing(sdY)) {"
"0","    varY = varY"
"0","  }"
"0","  else if (!missing(varY) & !missing(sdY)) {"
"0","    message(""Using varY"")"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Need either varY or sdY!""))"
"0","  }"
"0","  x_coef = str_extract(string = expression, pattern = ""[[:digit:]]{1,2}[xX]"") %>% str_extract(pattern = ""[[:digit:]]{1,2}"") %>% as.numeric()"
"0","  y_coef = str_extract(string = expression, pattern = ""[[:digit:]]{1,2}[yY]"") %>% str_extract(pattern = ""[[:digit:]]{1,2}"") %>% as.numeric()"
"0","  limit = str_extract(string = expression, pattern = ""[[:digit:]]{1,4}$"") %>% as.numeric()"
"0","  if (missing(cov_x_y) & independence == TRUE) {"
"0","    cov_x_y = 0"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check cov_x_y""))"
"0","  }"
"0","  sd = sqrt(x_coef ^ 2 * varX + y_coef ^ 2 * varY + 2 * cov_x_y)"
"0","  if (str_detect(string = expression, pattern = ""\\+"") == TRUE) {"
"0","    mean = x_coef * muX + y_coef * muY"
"0","  }"
"0","  else if (str_detect(string = expression, pattern = ""\\-"") == TRUE) {"
"0","    mean = x_coef * muX - y_coef * muY"
"0","  }"
"0","  if (str_detect(string = expression, pattern = ""<"") == TRUE) {"
"0","    prob = pnorm(q = limit, mean = mean, sd = sd)"
"0","  }"
"0","  else if (str_detect(string = expression, pattern = "">"") == TRUE) {"
"0","    prob = 1 - pnorm(q = limit, mean = mean, sd = sd)"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check expression sign!""))"
"0","  }"
"0","  return(prob)"
"0","}"
"0","# kevin_bivar_prob(expression = ""6X + 4Y > 1500"", muX = 170, sdX = 10, muY = 125, sdY = 8, independence = TRUE)"
