"0","kevin_ho_mean_test = function(mu, x_bar, n, test, sd, alpha, type, ...) {"
"0","  mu = as.numeric(data.frame(unlist(as.list(match.call())[c(""null_mean"", ""mu"")])[1]))"
"0","  x_bar = as.numeric(data.frame(unlist(as.list(match.call())[c(""x_bar"", ""sample_mean"")])[1]))"
"0","  sd = as.numeric(data.frame(unlist(as.list(match.call())[c(""sd"", ""sigma"", ""s"")])[1]))"
"0","  z = as.numeric(data.frame(unlist(as.list(match.call())[c(""z"", ""Z"")])[1]))"
"0","  t = as.numeric(data.frame(unlist(as.list(match.call())[c(""t"", ""T"")])[1]))"
"0","  lol_no_name = as.numeric(data.frame(unlist(as.list(match.call())[c(""alpha"", ""a"")])[1]))"
"0","  "
"0","  if (missing(alpha)) {"
"0","    alpha = .05"
"0","  }"
"0","  if (alpha > 100) {"
"0","    return(message (""ERROR: Check Alpha!""))"
"0","  }"
"0","  if (alpha >= 1) {"
"0","    alpha = alpha / 100"
"0","  }"
"0","  test_stat = (x_bar - mu) / (sd / sqrt(n))"
"0","  if (test == ""right_tailed"" | test == ""right tail"" | test == ""right"" | test == ""right tailed"" | test == ""greater"" | test == ""greater than"" | test == ""great"" | test == ""more"" | test == "">"") {"
"0","    if (type == ""z"") {"
"0","      critical_value = qnorm(p = 1 - alpha, mean = 0, sd = 1)"
"0","      p_value = 1 - pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      problem = ""One-Sided, Right Tailed Z Test"""
"0","    }"
"0","    else if (type == ""t"") {"
"0","      critical_value = qt(p = 1 - alpha, df = n - 1)"
"0","      p_value = 1 - pt(q = test_stat, df = n - 1)"
"0","      problem = ""One-Sided, Right Tailed T Test"""
"0","    }"
"0","    else {"
"0","      return(message(""ERROR: Check type!""))"
"0","    }"
"0","  }"
"0","  else if (test == ""left_tailed"" | test == ""left tail"" | test == ""left"" | test == ""left tailed"" | test == ""less"" | test == ""less than"" | test == ""<"") {"
"0","    if (type == ""z"") {"
"0","      critical_value = qnorm(p = alpha, mean = 0, sd = 1)"
"0","      p_value = pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      problem = ""One-Sided, Left Tailed Z Test"""
"0","    }"
"0","    else if (type == ""t"") {"
"0","      critical_value = qt(p = alpha, df = n - 1)"
"0","      p_value = pt(q = test_stat, df = n - 1)"
"0","      problem = ""One-Sided, Left Tailed T Test"""
"0","    }"
"0","    else {"
"0","      return(message(""ERROR: Check type!""))"
"0","    }"
"0","  }"
"0","  else if (test == ""two sided"" | test == ""two_sided"" | test == ""two_tailed"" | test == ""two tailed"" | test == ""both"" | test == ""two"" | test == ""not equal"" | test == ""different"" | test == ""!="" | test == ""not"") {"
"0","    if (type == ""z"") {"
"0","      if (pnorm(q = test_stat, mean = 0, sd = 1) > .5) {"
"0","        critical_value_low = qnorm(p = alpha / 2, mean = 0, sd = 1)"
"0","        critical_value_high = qnorm(p = 1 - alpha / 2, mean = 0, sd = 1)"
"0","        p_value = 2 * (1 - pnorm(q = test_stat, mean = 0, sd = 1))"
"0","      }"
"0","      else if (pnorm(q = test_stat, mean = 0, sd = 1) < .5) {"
"0","        critical_value_low = qnorm(p = alpha / 2, mean = 0, sd = 1)"
"0","        critical_value_high = qnorm(p = 1 - (alpha / 2), mean = 0, sd = 1)"
"0","        p_value = 2 * pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      }"
"0","      problem = ""Two-Sided Z Test"""
"0","      critical_value = c(critical_value_low, critical_value_high)"
"0","    }"
"0","    else if (type == ""t"") {"
"0","      if (pt(q = test_stat, df = n - 1) > .5) {"
"0","        critical_value_low = qt(p = alpha / 2, df = n - 1)"
"0","        critical_value_high = qt(p = 1 - (alpha / 2), df = n - 1)"
"0","        p_value = 2 * (1 - pt(q = test_stat, df = n - 1))"
"0","      }"
"0","      else if (pt(q = test_stat, df = n - 1) < .5) {"
"0","        critical_value_low = qt(p = alpha / 2 , df = n - 1)"
"0","        critical_value_high = qt(p = 1 - (alpha / 2), df = n - 1)"
"0","        p_value = 2 * pt(q = test_stat, df = n - 1)"
"0","      }"
"0","      problem = ""Two-Sided T Test"""
"0","      critical_value = c(critical_value_low, critical_value_high)"
"0","    }"
"0","    else {"
"0","      return(message(""ERROR: Check type!""))"
"0","    }"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check test!""))"
"0","  }"
"0","  if (p_value < alpha) {"
"0","    decision = c(""REJECT the Null. FAIL TO REJECT the Alternative."")"
"0","  }"
"0","  else if (p_value > alpha) {"
"0","    decision = c(""FAIL TO REJECT the Null. REJECT the Alternative."")"
"0","  }"
"0","  names(test_stat) = NULL"
"0","  names(p_value) = NULL"
"0","  results = list(problem, critical_value, test_stat, alpha, p_value, decision)"
"0","  names(results) = c(""Problem"", ""Critical_Value"", ""Test_Statistic"", ""Alpha"", ""P_Value"", ""Decision"")"
"0","  return(results)"
"0","}"
