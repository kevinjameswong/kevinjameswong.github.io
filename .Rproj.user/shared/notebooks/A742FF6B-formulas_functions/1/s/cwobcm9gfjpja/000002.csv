"0","kevin_ho_two_sample_mean_test = function(x_bar_A, s_A, n_A, x_bar_B, s_B, n_B, test, alpha, C, ...) {"
"0","  x_bar_A = as.numeric(data.frame(unlist(as.list(match.call())[c(""x_bar_A"", ""xbara"", ""mu_A"")])[1]))"
"0","  x_bar_B = as.numeric(data.frame(unlist(as.list(match.call())[c(""x_bar_B"", ""xbarb"", ""mu_B"")])[1]))"
"0","  s_A = as.numeric(data.frame(unlist(as.list(match.call())[c(""s_A"", ""s_a"", ""sA"", ""sa"")])[1]))"
"0","  s_B = as.numeric(data.frame(unlist(as.list(match.call())[c(""s_B"", ""s_b"", ""sB"", ""sb"")])[1]))"
"0","  lol_no_name = as.numeric(data.frame(unlist(as.list(match.call())[c(""c"", ""C"", ""diff"", ""difference"")])[1]))"
"0","  a = as.numeric(data.frame(unlist(as.list(match.call())[c(""alpha"", ""a"")])[1]))"
"0","  "
"0","  if (missing(C)) {"
"0","    C = 0"
"0","  }"
"0","  if (missing(alpha)) {"
"0","    alpha = .05"
"0","  }"
"0","  if (alpha > 100) {"
"0","    return(message (""ERROR: Check Alpha!""))"
"0","  }"
"0","  if (alpha >= 1) {"
"0","    alpha = alpha / 100"
"0","  }"
"0","  if (n_A >= 30 & n_B >= 30) {"
"0","    test_stat = ((x_bar_A - x_bar_B) - C) / sqrt((s_A ^ 2 / n_A + s_B ^ 2 / n_B))"
"0","  }"
"0","  else {"
"0","    s_pooled_sq = (((n_A - 1)  * s_A ^ 2) + ((n_B - 1)  * s_B ^ 2)) / (n_A + n_B - 2)"
"0","    n = n_A + n_B - 2"
"0","    test_stat = ((x_bar_A - x_bar_B) - C) / sqrt(s_pooled_sq * ((1 / n_A) + (1 / n_B)))"
"0","  }"
"0","  if (test == ""right_tailed"" | test == ""right tail"" | test == ""right"" | test == ""right tailed"" | test == ""greater"" | test == ""greater than"" | test == ""great"" | test == ""more"" |test == "">"") {"
"0","    if (n_A >= 30 & n_B >= 30) {"
"0","      critical_value = qnorm(p = 1 - alpha, mean = 0, sd = 1)"
"0","      p_value = 1 - pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      problem = ""One-Sided, Right Tailed Z Test"""
"0","    }"
"0","    else {"
"0","      critical_value = qt(p = 1 - alpha, df = n - 1)"
"0","      p_value = 1 - pt(q = test_stat, df = n - 1)"
"0","      problem = ""One-Sided, Right Tailed T Test"""
"0","    }"
"0","  }"
"0","  else if (test == ""left_tailed"" | test == ""left tail"" | test == ""left"" | test == ""left tailed"" | test == ""less"" | test == ""less than"" | test == ""<"") {"
"0","    if (n_A >= 30 & n_B >= 30) {"
"0","      critical_value = qnorm(p = alpha, mean = 0, sd = 1)"
"0","      p_value = pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      problem = ""One-Sided, Left Tailed Z Test"""
"0","    }"
"0","    else {"
"0","      critical_value = qt(p = alpha, df = n - 1)"
"0","      p_value = pt(q = test_stat, df = n - 1)"
"0","      problem = ""One-Sided, Left Tailed T Test"""
"0","    }"
"0","  }"
"0","  else if (test == ""two sided"" | test == ""two_sided"" | test == ""two_tailed"" | test == ""two tailed"" | test == ""both"" | test == ""two"" | test == ""not equal"" | test == ""different"" | test == ""!="" | test == ""not"") {"
"0","    if (n_A >= 30 & n_B >= 30) {"
"0","      if (pnorm(q = test_stat, mean = 0, sd = 1) > .5) {"
"0","        critical_value_low = qnorm(p = alpha / 2, mean = 0, sd = 1)"
"0","        critical_value_high = qnorm(p = 1 - (alpha / 2), mean = 0, sd = 1)"
"0","        p_value = 2 * (1 - pnorm(q = test_stat, mean = 0, sd = 1))"
"0","      }"
"0","      else if (pnorm(q = test_stat, mean = 0, sd = 1) < .5) {"
"0","        critical_value_low = qnorm(p = alpha / 2, mean = 0, sd = 1)"
"0","        critical_value_high = qnorm(p = 1 - (alpha / 2), mean = 0, sd = 1)"
"0","        p_value = 2 * pnorm(q = test_stat, mean = 0, sd = 1)"
"0","      }"
"0","      problem = ""Two-Sided Z Test"""
"0","      critical_value = c(critical_value_low, critical_value_high)"
"0","    }"
"0","    else {"
"0","      if (pt(q = test_stat, df = n - 1) > .5) {"
"0","        critical_value_low = qt(p = alpha / 2, df = n - 1)"
"0","        critical_value_high = qt(p = 1 - (alpha / 2), df = n - 1)"
"0","        p_value = 2 * (1 - pt(q = test_stat, df = n - 1))"
"0","      }"
"0","      else if (pt(q = test_stat, df = n - 1) < .5) {"
"0","        critical_value_low = qt(p = alpha / 2, df = n - 1)"
"0","        critical_value_high = qt(p = 1 - (alpha / 2), df = n - 1)"
"0","        p_value = 2 * pt(q = test_stat, df = n - 1)"
"0","      }"
"0","      problem = ""Two-Sided T Test"""
"0","      critical_value = c(critical_value_low, critical_value_high)"
"0","    }"
"0","  }"
"0","  else {"
"0","    return(message(""ERROR: Check test!""))"
"0","  }"
"0","  if (p_value < alpha) {"
"0","    decision = c(""REJECT the Null. FAIL TO REJECT the Alternative."")"
"0","  }"
"0","  else if (p_value > alpha) {"
"0","    decision = c(""FAIL TO REJECT the Null. REJECT the Alternative."")"
"0","  }"
"0","  names(test_stat) = NULL"
"0","  names(p_value) = NULL"
"0","  results = list("
"0","    ifelse(exists(""problem""),        problem,        NA),"
"0","    ifelse(exists(""n""),              n,              NA),"
"0","    ifelse(exists(""critical_value""), critical_value, NA),"
"0","    ifelse(exists(""test_stat""),      test_stat,      NA),"
"0","    ifelse(exists(""alpha""),          alpha,          NA),"
"0","    ifelse(exists(""p_value""),        p_value,        NA),"
"0","    ifelse(exists(""decision""),       decision,       NA))"
"0","  names(results) = c(""Problem"", ""Degrees_of_Freedom"", ""Critical_Value"", ""Test_Statistic"", ""Alpha"", ""P_Value"", ""Decision"")"
"0","  return(results)"
"0","}"
