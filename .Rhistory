percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
runApp('calculators.R')
?qbinom
k = 0:12
n = 12
p = 0.2
df = data.frame(x, px = dbinom(x = k, size = n, prob = p))
x = 0:12
n = 12
p = 0.2
df = data.frame(x, px = dbinom(x = x, size = n, prob = p))
ggplot(df, aes(x, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=",size,",","p=",prob,")"))
ggplot(df, aes(x, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=", n ,",","p=",p,")"))
k = 0:12
n = 12
p = 0.2
df = data.frame(k, px = dbinom(x = k, size = n, prob = p))
ggplot(df, aes(k, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=", n ,",","p=",p,")"))
ggplot(df, aes(k, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom", "(", "trial size=", n, ",", "p=", p, ")", sep = ""))
library(shiny); runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
?plotOutput()
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
?aes()
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
library(shiny); runApp('calculators.R')
tcdf = function(lower_bound, upper_bound, df) {
pt(q = upper_bound, df = df) - pt(q = lower_bound, df = df)
}
tcdf(lower_bound = 2, upper_bound = 4, df = 20)
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
ggplot
?ggplot
??ggplot
?stat_function()
runApp('calculators.R')
xvalues <- data.frame(x = c(-3, 3))
xvalues <- data.frame(x = c(-3, 3))
ggplot(xvalues, aes(x = xvalues)) + stat_function(fun = dnorm) +
stat_function(fun = dnorm, geom = "area", fill = "red", alpha = 0.3) +
xlim(c(-4, 4)) +
labs(x = "\n Z-Score (z)", y = "f(z) \n", title = "Standard Normal Distribution \n") +
annotate("text", x = 2.5, y = 0.3, parse = TRUE, size = 7, fontface ="bold",
label= "frac(1, sqrt(2 * pi)) * e ^ {frac(-z^2, 2)}") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="darkgreen", size = 12),
axis.title.y = element_text(face="bold", colour="darkgreen", size = 12))
ggplot(xvalues, aes(x = xvalues )) + stat_function(fun = dnorm) +
xlim(c(-4, 4)) +
labs(x = "\n Z-Score (z)", y = "f(z) \n", title = "Standard Normal Distribution \n") +
annotate("text", x = 3.3, y = 0.3, parse = TRUE, size = 7, fontface ="bold",
label= "frac(1, sqrt(2 * pi)) * e ^ {frac(-z^2, 2)}") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="brown", size = 12),
axis.title.y = element_text(face="bold", colour="brown", size = 12))
ggplot(xvalues, aes(x = xvalues )) + stat_function(fun = dnorm) +
labs(x = "\n Z-Score (z)", y = "f(z) \n", title = "Standard Normal Distribution \n") +
annotate("text", x = 3.3, y = 0.3, parse = TRUE, size = 7, fontface ="bold",
label= "frac(1, sqrt(2 * pi)) * e ^ {frac(-z^2, 2)}") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="brown", size = 12),
axis.title.y = element_text(face="bold", colour="brown", size = 12))
# Define total area to be shaded
alpha_level <- pnorm(-1.35) # 0.088
ggplot(data = tibble(x = -3.5:3.5), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
alpha_level <- pnorm(-1.35) # 0.088
ggplot(data = tibble(x = -3.5:3.5), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
pnorm(-1.55)
library(shiny); runApp('spotify.R')
install.packages("reticulate")
library(reticulate)
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
#Update_Date
Sys.Date()
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
alpha_level <- pnorm(-1.35) # 0.088
ggplot(data = c(x = values(-3.5:3.5)), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
ggplot(data = c(x = -3.5:3.5), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
ggplot(data = c(x = data.frame(-3.5:3.5)), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
ggplot(data = data.frame(x = -3.5:3.5), mapping = aes(x = x)) +
# Draw the curve
stat_function(fun = dnorm) +
# Shade the lower tail
stat_function(
fun = function(x) ifelse(x < qnorm(alpha_level), dnorm(x), NA),
geom = "area",
fill = "red",
alpha = 0.2
) +
scale_x_continuous(
breaks = qnorm(c(alpha_level, 0.5)),
labels = round(qnorm(c(alpha_level, 0.5)), digits = 2)
) +
labs(x = "z", y = "Density")
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
py_install("pandas")
reticulate::repl_python()
read.csv("files/koreanphrases")
read.csv("files/koreanphrases.csv")
xxxt = read.csv("files/koreanphrases.csv")
View(xxxt)
reticulate::repl_python()
range(df)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
?rnorm
sample(x = 1:100)
sample(x = 1:100, size = 1)
sample(x = 1:1, size = 1, replace = FALSE)
sample(x = 1:1, size = 1, replace = FALSE)
sample(x = 1:3, size = 1, replace = FALSE)
sample(x = 1:3, size = 1, replace = FALSE)
sample(x = 1:3, size = 1, replace = FALSE)
sample(x = 1:3, size = 1, replace = FALSE)
sample(x = 1:3, size = 1, replace = TRUE)
sample(x = 1:3, size = 1, replace = TRUE)
sample(x = 1:3, size = 1, replace = TRUE)
sample(x = 1:3, size = 1, replace = TRUE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = FALSE)
sample(x = 1:3, size = 2, replace = TRUE)
sample(x = 1:3, size = 2, replace = TRUE)
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
rtt = sample(x = 1:3, size = 2, replace = TRUE)
rtt = rtt + 1
rtt
library(shiny); runApp('korean.R')
runApp('korean.R')
?actionButton
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
reticulate::repl_python()
?icon()
library(shiny); runApp('korean.R')
library(shiny); runApp('korean.R')
?reactiveVal
?reactiveValues
runApp('korean.R')
runApp('korean.R')
?observeEvent
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
korean = read.csv(file = "files/koreanphrases.csv")
korean$Index = korean %>% nrow() %>% seq.int()
korean %>% filter(English == "Hello")
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
?textOutput
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
?updateTextInput
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
git checkout --orphan latest_branch
library(shiny); runApp('korean.R')
runApp('korean.R')
?h1
?h1()
?h1()
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
library(shiny); runApp('korean.R')
install.packages("shinyjs")
library(js)
library(shinyjs)
runApp('korean.R')
runApp('justlikeTTTTT.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
?removeUI
?DT
??DT
?insertUi
?insertUI
?insertUI
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
