Total_Days_Runs = sum(unique_run_count),
Distance = sum(RunDistance),
Time = total_time(
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
),
Pace = pace_calculator(
distance = RunDistance %>% sum(),
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
)
)
# groupby_year = rbind(groupby_year, total_row)
names(groupby_year) = c("Year", "Total Runs", "Total Run Days", "Miles", "Time", "Pace")
groupby_year = groupby_year[order(groupby_year$Year), ]
kable(groupby_year, format = "html", align = "lrrrr") %>%
kable_styling(bootstrap_options = c("hover", "responsive"))# %>%
#row_spec(row = nrow(groupby_year), bold = TRUE, font_size = 21)
ggplot(data = groupby_year, aes(x = Year, y = Miles)) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = groupby_year$Miles %>% round(digits = 2) %>% format(nsmall = 2)), vjust = 1.6, color = "white", size = 5) +
xlab(label = "Year") +
ylab(label = "Miles") +
ggtitle(label = "Miles by Year") +
theme(plot.title = element_text(hjust = 0.5))
cool = c("help", "help")
cool
help = c(2, 2)
p = c(2, 3)
data = data.frame(
help = help,
p = p
)
View(data)
library(dplyr)
install.packages("ggplot2")
librray("googlesheets4")
library("googlesheets4")
library(lubridate)
install.packages("lubridate")
library(lubridate)
install.package("lubridate")
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
install.packages("scales")
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
update_packages("rlang")
remotes::update_packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("kableExtra")
install.packages("rlang")
install.packages("rlang")
library(knitr)
library(kableExtra)
install.packages("kableExtra")
install.packages("stringi")
library(kableExtra)
library(tidyverse)
install.packages("tidyverse")
install.packages("stringi")
install.packages("stringi")
install.packages("tidyverse")
library(knitr)
library(kableExtra)
library("kableExtra")
install.packages("kableExtra")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(kableExtra)
install.packages("kableExtra")
library(knitr)
library(knitr)
library(kableExtra)
library(rlang)
library(tidyverse)
library(tidyverse)
library(stringr)
library(stringr)
library(ggplot2)
library(dplyr)
library(kableExtra)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
library(kableExtra)
library(rlang)
library(tidyverse)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
Start_Date = as.Date("2/7/2017", format = "%m/%d/%Y")
percent = function(x, digits = 2, format = "f", ...) {
formatC(x, format = format, digits = digits, ...) %>% paste("%", sep = "")
}
round_down_2_decimals = function(x, digits = 2, format = "f", ...) {
x %>% "*"(100) %>% floor() %>% "/"(100) %>% formatC(format = "f", digits = 2)
}
Update_Date = as.Date("6/28/2019", format = "%m/%d/%Y")
# The morning of the last sleep
sleep = read.csv("~/Documents/Kevin Stuff/Not Work/website/Website Files/more website files/sleepdata_6_28_2019.csv", sep = ";")
total_time = function(seconds) {
h = seconds %>% sum() %>% "%/%"(60) %>% "%/%"(60)
m = seconds %>% sum() %>% "%/%"(60) %>% "%%"(60) %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16)
s = seconds %>% sum() %>% "%%"(60) %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16)
t = paste(h, ":", m, ":", s, sep = "")
return(t)
}
minutes_to_time = function(insert_min) {
hours = insert_min %>% sum() %>% "%/%"(60) %>% floor()
minutes = insert_min %>% sum() %>% "%%"(60) %>% floor() %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16)
return(paste(hours, ":", minutes, sep = ""))
}
sleep$Sleep.quality = str_extract(string = sleep$Sleep.quality, pattern = "[0-9]{1,3}") %>% as.integer()
sleep$Time.in.bed = str_extract(string = sleep$Time.in.bed, pattern = "[0-9]{1,2}") %>% as.integer() * (60) + (str_extract(string = sleep$Time.in.bed, pattern = ":[0-9]{1,2}") %>% str_extract(pattern = "[0-9]{1,2}") %>% as.integer()) %>% as.integer()
sleep$enddates = str_extract(string = sleep$End, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% as.Date()
add_on = cbind(matrix(setdiff(c(as.Date(1:(Update_Date - Start_Date), origin = Start_Date)), str_extract(string = sleep$End, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% as.Date()),
nrow = length(setdiff(c(as.Date(1:(Update_Date - Start_Date), origin = Start_Date)), str_extract(string = sleep$End, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% as.Date())),
ncol = 1),
matrix(NA,
nrow = length(setdiff(c(as.Date(1:(Update_Date - Start_Date), origin = Start_Date)), str_extract(string = sleep$End, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% as.Date())),
ncol = ncol(sleep) - 1)) %>% as.data.frame()
add_on$V1 = as.Date(add_on$V1, origin = "1970-01-01", tz = "CDT")
names(add_on) = names(sleep)
add_on$enddates = add_on$Start
add_on$Start = add_on$End
sleep = rbind(sleep, add_on)
sleep = sleep[order(sleep$enddates, decreasing = FALSE), ]
sleep$Weekday = factor(x = rep(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), len = nrow(sleep)),
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Total", "Average"))
sleep$theo_startdates = sleep$enddates - 1
sleep$Year = sleep$theo_startdates %>%
format(format = "%Y") %>%
factor(levels = sleep$theo_startdates %>%
format(format = "%Y") %>%
unique() %>%
sort()
)
sleep$Month = sleep$theo_startdates %>%
format(format = "%m") %>%
factor(levels = sleep$theo_startdates %>%
format(format = "%m") %>%
unique() %>%
sort()
)
sleep$YearMonth = paste(sleep$Month, " ", sleep$Year, sep = "") %>% factor(levels = paste(month.name, rep(sleep$Year %>% levels(), each = length(month.name)))[1:(Update_Date %>% format(format = "%m") %>% as.integer() %>% "+"(1) - Start_Date %>% format(format = "%m") %>% as.integer() + (Update_Date %>% format(format = "%y") %>% as.integer() - Start_Date %>% format(format = "%y") %>% as.integer()) %>% "*"(12))])
sleep$Start = sleep$Start %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S")
sleep$End = sleep$End %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S")
sleep$duration = difftime(time1 = sleep$End, time2 = sleep$Start, units = "sec") #%>% "/"(60)
sleep$sa3_sleep_start = difftime(time1 = sleep$Start, time2 = str_extract(string = sleep$theo_startdates, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% paste(" 18:00:00 PM", sep = "") %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S"), units = "sec")
sleep$sb3_sleep_end = difftime(time1 = str_extract(string = sleep$enddates, pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}") %>% paste(" 18:00:00 PM", sep = "") %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S"), time2 = sleep$End, units = "sec")
to_bed_time = function(s) {
k = (today() %>% paste(" 18:00:00 PM", sep = "") %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S %p") + s) %>% strftime(format = "%r")
return(k)
}
wake_ups_time = function(s) {
k = (today() %>% paste(" 18:00:00 PM", sep = "") %>% as.POSIXct(format = "%Y-%m-%d %H:%M:%S %p") - s) %>% strftime(format = "%r")
return(k)
}
seconds_to_time = function(insert_seconds) {
a = ifelse(test = insert_seconds %/% (60 * 60) == 0,
yes = 0,
no = insert_seconds %/% (60 * 60) %>% strptime(format = "%S") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{1,2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.integer())
a = ifelse(a >= 13,
yes = paste(a - 12, sep = ""),
no = ifelse(a == 12,
yes = "12",
no = paste(a, sep = "")))
b = ifelse(test = insert_seconds %/% 60 %% 60 == 0,
yes = "00" %>% paste(sep = ""),
no = insert_seconds %/% 60 %% 60 %>% strptime(format = "%S") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{1,2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.character())
c = ifelse(test = insert_seconds %% 60 == 0,
yes = "00" %>% paste(sep = ""),
no = insert_seconds %% 60 %>% strptime(format = "%S") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{1,2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.character())
d = ifelse(test = a >= 6 & a <= 11,
yes = "PM",
no = "AM")
meow = strptime(paste(a, b, c, sep = ":"), format = "%H:%M:%S")
e = str_extract(string = meow, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}")
f = paste(e, " ", d, sep = "")
return(f)
}
groupby_year = sleep %>%
group_by(Year) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
names(groupby_year) = c("Year", "Total Nights", "Sleep Quality (%)", "Average Time in Bed", "Asleep Time", "Wake Up Time")
kable(groupby_year, format = "html", align = "lrrcrrr") %>%
kable_styling(bootstrap_options = c("hover", "responsive"))
ggplot(data = groupby_year, aes(x = Year, y = `Sleep Quality (%)` %>% as.numeric())) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = percent(groupby_year$`Sleep Quality (%)`)), vjust = 1.6, color = "white", size = 5) +
ggtitle(label = "Sleep Quality vs. Year") +
xlab(label = "Year") +
ylab(label = "Sleep Quality") +
coord_cartesian(ylim = c(85, 90.25)) +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 13, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"))
groupby_weekday = sleep %>%
group_by(Weekday) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
#bed_time = (ifelse(test = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time(),
#wake_time = (ifelse(test = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
names(groupby_weekday) = c("Day", "Total Nights", "Sleep Quality (%)", "Average Time in Bed", "Asleep Time", "Wake Up Time")
kable(groupby_weekday, format = "html", align = "lcccccc") %>%
kable_styling(bootstrap_options = c("hover", "responsive"))# %>%
#row_spec(row = nrow(groupby_weekday), bold = TRUE, font_size = 21)
groupby_weekday = sleep %>%
group_by(Weekday) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
#bed_time = (ifelse(test = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time(),
#wake_time = (ifelse(test = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
ggplot(data = groupby_year, aes(x = Year, y = `Sleep Quality (%)` %>% as.numeric())) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = percent(`Sleep Quality (%)`)), vjust = 1.6, color = "white", size = 5) +
ggtitle(label = "Sleep Quality vs. Year") +
xlab(label = "Year") +
ylab(label = "Sleep Quality") +
coord_cartesian(ylim = c(85, 90.25)) +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 13, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"))
groupby_year = sleep %>%
group_by(Year) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
groupby_year = sleep %>%
group_by(Year) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
groupby_year = sleep %>%
group_by(Year) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
options(dplyr.summarise.inform = FALSE)
groupby_year = sleep %>%
group_by(Year) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
# options(dplyr.summarise.inform = FALSE)
groupby_weekday = sleep %>%
group_by(Weekday) %>%
summarise(total = Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE),
avg_quality = Sleep.quality %>% mean(na.rm = TRUE) %>% round_down_2_decimals(),
time_in_bed = mean(Time.in.bed, na.rm = TRUE) %>% minutes_to_time(),
to_bed = sa3_sleep_start %>% mean(na.rm = TRUE) %>% to_bed_time(),
wake_ups_time_litty = sb3_sleep_end %>% mean(na.rm = TRUE) %>% wake_ups_time()
#bed_time = (ifelse(test = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = Start, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time(),
#wake_time = (ifelse(test = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) <= 60 * 60 * 12, yes = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60) %>% "+"(60 * 60 *24), no = str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) %>% "*"(60)) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() %>% "*"(60) + str_extract(string = End, pattern = "[0-9]{2}:[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = ":[0-9]{2}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{1}:[0-9]{2}") %>% str_extract(pattern = "[0-9]{2}") %>% as.numeric() - (60 * 60 * 12)) %>% as.numeric() %>% mean(na.rm = TRUE) %>% seconds_to_time()
# nap_prob = paste((Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1 hour\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(1.5 hours\\)") %>% sum(na.rm = TRUE) + Sleep.Notes %>% str_detect(pattern = "Took a nap \\(2 hours\\)") %>% sum(na.rm = TRUE)) %>% "/"(Sleep.quality %>% ">="(0) %>% sum(na.rm = TRUE)) %>% "*"(10000) %>% floor() %>% "/"(100), "%", sep = "")
#avg_footsteps = Activity..steps. %>% mean(na.rm = TRUE) %>% floor()
)
ggplot(data = groupby_weekday, aes(x = Day, y = `Sleep Quality (%)` %>% as.numeric())) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = percent(groupby_weekday$`Sleep Quality (%)`)), vjust = 1.6, color = "white", size = 4) +
ggtitle(label = "Sleep Quality vs. Weekday") +
xlab(label = "Weekday") +
ylab(label = "Sleep Quality") +
coord_cartesian(ylim = c(85, 90.25)) +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"))
library(lubridate)
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
library(ggplot2)
Start_Date = as.Date("1/28/2018", format = "%m/%d/%Y")
Update_Date = as.Date("1/1/2020", format = "%m/%d/%Y")
# read_data = read.csv(file = "~/Documents/Kevin Stuff/Not Work/website/Website Files/more website files/Running_10_12_2019.csv", skip = 1)
read_data = read.csv(file = "~/Documents/Kevin Stuff/Not Work/website/Website Files/more website files/Book4.csv", skip = 1)
running = read_data %>%
select(Location,
Day,
Month,
Day.1,
Date,
Run.Calories,
Run.Distance,
Run.Minutes,
Run.Seconds,
Walk.Calories,
Walk.Distance,
Walk.Minutes,
Walk.Seconds,
Start.Time) %>%
# slice(1:(Update_Date - Start_Date - 1) %>% as.integer())
slice(1:713 %>% as.integer())
names(running) = c("Location", "Weekday_Read", "Month_Number_Read", "Day Number", "Date", "Run Calories", "Run Distance", "Run Minutes", "Run Seconds", "Walk Calories", "Walk Distance", "Walk Minutes", "Walk Seconds", "StartTime")
running$Date         = running$Date            %>% as.Date(format = "%m/%d/%y")
running$DayNumber    = running$`Day Number`    %>% as.character() %>% as.integer()
running$RunCalories  = running$`Run Calories`  %>% as.character() %>% as.integer()
running$RunDistance  = running$`Run Distance`  %>% as.character() %>% as.numeric()
running$RunMinutes   = running$`Run Minutes`   %>% as.character() %>% as.integer()
running$RunSeconds   = running$`Run Seconds`   %>% as.character() %>% as.integer()
running$WalkCalories = running$`Walk Calories` %>% as.character() %>% as.integer()
running$WalkDistance = running$`Walk Distance` %>% as.character() %>% as.numeric()
running$WalkMinutes  = running$`Walk Minutes`  %>% as.character() %>% as.integer()
running$WalkSeconds  = running$`Walk Seconds`  %>% as.character() %>% as.integer()
running = running %>%
select(Location,
Weekday_Read,
Month_Number_Read,
Date,
StartTime,
DayNumber,
RunCalories,
RunDistance,
RunMinutes,
RunSeconds,
WalkCalories,
WalkDistance,
WalkMinutes,
WalkSeconds)
running$Month = factor(running$Month_Number_Read)
levels(running$Month) = c(month.name, "Total")
running$Year = running$Date %>%
format(format = "%Y") %>%
factor(levels = running$Date %>%
format(format = "%Y") %>%
unique() %>%
sort()
)
running$Weekday = factor(x = running$Weekday_Read,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Total"))
running$YearMonth = paste(running$Month, " ", running$Year, sep = "") %>% factor(levels = paste(month.name, rep(running$Year %>% levels(), each = length(month.name)))[1:(Update_Date %>% format(format = "%m") %>% as.integer() %>% "+"(1) - Start_Date %>% format(format = "%m") %>% as.integer() + (Update_Date %>% format(format = "%y") %>% as.integer() - Start_Date %>% format(format = "%y") %>% as.integer()) %>% "*"(12))])
running = select(running, - Weekday_Read, - Month_Number_Read)
running$Treadmill = ifelse(running$Location == "Arc" | running$Location == "Ike" | running$Location == "CRCE" | running$Location == "Lifetime Fitness" | running$Location == "Lifetime", 1, 0)
running$CumRunDistance = cumsum(running$RunDistance)
running$run_Count = ifelse(running$RunDistance > 0, 1, 0)
# running$unique_run_count = ifelse(running$RunDistance == running %>% group_by(Date) %>% mutate(max(RunDistance)), 1, 0)
# 2 - 1 - 2020: There has to be a better way to do this but it's whatever. this will do
running = running %>% group_by(Date) %>% mutate(y = max(RunDistance))
running$unique_run_count = ifelse(running$RunDistance == running$y & running$y != 0, 1, 0)
pace_calculator = function(distance, minutes, seconds) {
m = ((minutes * 60 + seconds) / distance) %>% ceiling() %>% "%/%"(60)
s = ((minutes * 60 + seconds) / distance) %>% ceiling() %>% "%%"(60)
pace = paste(m %>% as.numeric() %>% as.character(),
":",
s %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16),
sep = "")
return(pace)
}
yearly_mileage_pace = function(distance) {
l = (distance / n()) %>% "*"(365) %>% "*"(100) %>% floor() %>% "/"(100)
return(l)
}
total_time = function(minutes, seconds) {
h = (minutes * 60 + seconds) %>% sum() %>% "%/%"(60) %>% "%/%"(60)
m = (minutes * 60 + seconds) %>% sum() %>% "%/%"(60) %>% "%%"(60) %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16)
s = (minutes * 60 + seconds) %>% sum() %>% "%%"(60) %>% paste(":01 ", today(), sep = "") %>% as.POSIXct(format = "%M:%S %Y-%m-%d") %>% str_sub(start = 15, end = 16)
t = paste(h, ":", m, ":", s, sep = "")
return(t)
}
miles_per_run = function(distance) {
t = (distance %>% sum() / (distance > 0) %>% sum()) %>% "*"(100) %>% floor() %>% "/"(100)
return(t)
}
miles_per_day = function(distance) {
t = (distance %>% sum() / (n())) %>% "*"(100) %>% floor() %>% "/"(100)
return(t)
}
miles_per_hour = function(distance, minutes, seconds) {
t = (distance %>% sum() * 60 * 60 / (minutes * 60 + seconds)) %>% "*"(1000) %>% floor() %>% "/"(1000)
return(t)
}
total_row = c("Total",
sum(running$RunDistance > 0),
sum(running$RunDistance),
"ok",
"pace")
include_graphics("images/halfhd.jpg")
# options(dplyr.summarise.inform = FALSE)
groupby_year = running %>%
group_by(Year) %>%
summarise(Total_Runs = sum(RunDistance > 0),
Total_Days_Runs = sum(unique_run_count),
Distance = sum(RunDistance),
Time = total_time(
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
),
Pace = pace_calculator(
distance = RunDistance %>% sum(),
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
)
)
# groupby_year = rbind(groupby_year, total_row)
names(groupby_year) = c("Year", "Total Runs", "Total Run Days", "Miles", "Time", "Pace")
groupby_year = groupby_year[order(Year), ]
kable(groupby_year, format = "html", align = "lrrrr") %>%
kable_styling(bootstrap_options = c("hover", "responsive"))# %>%
#row_spec(row = nrow(groupby_year), bold = TRUE, font_size = 21)
ggplot(data = groupby_year, aes(x = Year, y = Miles)) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = groupby_year$Miles %>% round(digits = 2) %>% format(nsmall = 2)), vjust = 1.6, color = "white", size = 5) +
xlab(label = "Year") +
ylab(label = "Miles") +
ggtitle(label = "Miles by Year") +
theme(plot.title = element_text(hjust = 0.5))
options(dplyr.summarise.inform = FALSE)
groupby_year = running %>%
group_by(Year) %>%
summarise(Total_Runs = sum(RunDistance > 0),
Total_Days_Runs = sum(unique_run_count),
Distance = sum(RunDistance),
Time = total_time(
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
),
Pace = pace_calculator(
distance = RunDistance %>% sum(),
minutes = RunMinutes %>% sum(),
seconds = RunSeconds %>% sum()
)
)
# groupby_year = rbind(groupby_year, total_row)
names(groupby_year) = c("Year", "Total Runs", "Total Run Days", "Miles", "Time", "Pace")
groupby_year = groupby_year[order(groupby_year$Year), ]
kable(groupby_year, format = "html", align = "lrrrr") %>%
kable_styling(bootstrap_options = c("hover", "responsive"))# %>%
#row_spec(row = nrow(groupby_year), bold = TRUE, font_size = 21)
ggplot(data = groupby_year, aes(x = Year, y = Miles)) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = groupby_year$Miles %>% round(digits = 2) %>% format(nsmall = 2)), vjust = 1.6, color = "white", size = 5) +
xlab(label = "Year") +
ylab(label = "Miles") +
ggtitle(label = "Miles by Year") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = groupby_year, aes(x = Year, y = Miles)) +
geom_bar(stat = "identity", fill = "darkblue") +
geom_text(aes(label = Miles %>% round(digits = 2) %>% format(nsmall = 2)), vjust = 1.6, color = "white", size = 5) +
xlab(label = "Year") +
ylab(label = "Miles") +
ggtitle(label = "Miles by Year") +
theme(plot.title = element_text(hjust = 0.5))
