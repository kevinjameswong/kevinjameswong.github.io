mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x)
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Tori Kelly")
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Lifehouse")
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Daughtry")
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Justin Bieber")
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Gavin James")
left_join(x = TopArtists_ByYear, y = TopArtists_ByYear, by = c("ArtistName")) %>%
mutate("RepeatArtist" = ifelse(test = Year.y > Year.x, 1, 0),
"NewArtist" = ifelse(test = Year.y > Year.x, 0, 1)) %>%
filter(Year.y >= Year.x, ArtistName == "Gavin James")
#Year_Artist =
Year_Artist
runApp('spotify.R')
#Year_Artist =
Year_Artist
#Year_Artist =
Year_Artist %>%
filter(ArtistName == "Nickelback")
TopArtists_ByYear
duplicated(TopArtists_ByYear$ArtistName)
mutate(test = KK = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New)"
TopArtists_ByYear %>%
mutate(test = KK = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")
TopArtists_ByYear %>%
TopArtists_ByYear %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New"))
TopArtists_ByYear
TopArtists_ByYear %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New"))
TopArtists_ByYear %>%
ungroup() %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New"))
TopArtists_ByYear %>%
ungroup() %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Nickelback")
TopArtists_ByYear %>%
ungroup() %>%
arrange(Year) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Nickelback")
TopArtists_ByYear %>%
ungroup() %>%
arrange(Year(desc)) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Nickelback")
TopArtists_ByYear %>%
ungroup() %>%
arrange(desc(Year)) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Nickelback")
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Drake")
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat", no = "New")) %>%
filter(ArtistName == "Lifehouse")
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
?coord_polar
?geom_color
?geom_color()
?geom_col()
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
```{r}
Artists_New_Repeat %>%
arrange(Year, -Song_Count) %>%
filter(Year == input$SelectedYear) %>%
group_by(KK) %>%
summarize(`Song Count` = sum(Song_Count))
Artists_New_Repeat =
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
mutate(KK = ifelse(test = duplicated(TopArtists_ByYear$ArtistName), yes = "Repeat Artist", no = "New Artist"))# %>%
Artists_New_Repeat %>%
arrange(Year, -Song_Count) %>%
filter(Year == input$SelectedYear) %>%
group_by(KK) %>%
summarize(`Song Count` = sum(Song_Count))
Artists_New_Repeat %>%
arrange(Year, -Song_Count) %>%
filter(Year == 2024) %>%
group_by(KK) %>%
summarize(`Song Count` = sum(Song_Count))
Artists_New_Repeat %>%
arrange(Song_Count) %>%
filter(Year == 2024) %>%
group_by(KK) %>%
summarize(`Song Count` = sum(Song_Count))
Artists_New_Repeat %>%
arrange(Song_Count) %>%
filter(Year == 2024) %>%
group_by(KK) %>%
summarize(`Song Count` = sum(Song_Count)) %>%
arrange(desc(`Song Count`))
runApp('spotify.R')
runApp('spotify.R')
library(shiny); runApp('spotify.R')
library(shiny); runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
library(shiny); runApp('spotify.R')
read_data = read.csv(file = "files/running_data.csv", skip = 0)
library(shiny); runApp('spotify.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
?numericInput()
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
?actionButton()
runApp('calculators.R')
runApp('calculators.R')
?actionButton()
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
?eventReactive()
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('yourtruelove.R')
runApp('yourtruelove.R')
runApp('yourtruelove.R')
runApp('yourtruelove.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
kevin_binom = function(trials, prob, type, successes, ...) {
trials = as.numeric(data.frame(unlist(as.list(match.call())[c("trials", "n")])[1]))
prob = as.numeric(data.frame(unlist(as.list(match.call())[c("prob", "p")])[1]))
successes = as.numeric(data.frame(unlist(as.list(match.call())[c("successes", "k")])[1]))
if (trials < successes) {
return(message("ERROR: Check n or k!"))
}
prob_less = pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_at_most = pbinom(q = successes[1], size = trials, prob = prob)
prob_equal = pbinom(q = successes[1], size = trials, prob = prob) - pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_greater = 1 - pbinom(q = successes[1], size = trials, prob = prob)
prob_at_least = 1 - pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_between = pbinom(q = successes[2], size = trials, prob = prob) - pbinom(q = successes[1] - 1, size = trials, prob = prob)
results = list(trials, successes, prob, prob_less, prob_at_most, prob_equal, prob_at_least, prob_greater, prob_between)
names(results) = c(
"Trials",
"Successes",
"Probability of Each Success",
paste("Less Than ", successes[1], " Successes", sep = ""),
paste("At Most ", successes[1], " Successes", sep = ""),
paste("Equal To ", successes[1], " Successes", sep = ""),
paste("At Least ", successes[1], " Successes", sep = ""),
paste("Greater Than ", successes[1], " Successes", sep = ""),
paste("Between ", successes[1], " and ", successes[2], " Successes", sep = "")
)
return(results)
}
kevin_binom(n = 12, prob = .5, k = 11)
runApp('calculators.R')
library(shiny); runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
kevin_binom = function(trials, prob, type, successes, ...) {
trials = as.numeric(data.frame(unlist(as.list(match.call())[c("trials", "n")])[1]))
prob = as.numeric(data.frame(unlist(as.list(match.call())[c("prob", "p")])[1]))
successes = as.numeric(data.frame(unlist(as.list(match.call())[c("successes", "k")])[1]))
if (trials < successes) {
return(message("ERROR: Check n or k!"))
}
prob_less = pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_at_most = pbinom(q = successes[1], size = trials, prob = prob)
prob_equal = pbinom(q = successes[1], size = trials, prob = prob) - pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_greater = 1 - pbinom(q = successes[1], size = trials, prob = prob)
prob_at_least = 1 - pbinom(q = successes[1] - 1, size = trials, prob = prob)
prob_between = pbinom(q = successes[2], size = trials, prob = prob) - pbinom(q = successes[1] - 1, size = trials, prob = prob)
results = list(trials, successes, prob, prob_less, prob_at_most, prob_equal, prob_at_least, prob_greater, prob_between)
names(results) = c(
"Trials",
"Successes",
"Probability of Each Success",
paste("Less Than ", successes[1], " Successes", sep = ""),
paste("At Most ", successes[1], " Successes", sep = ""),
paste("Equal To ", successes[1], " Successes", sep = ""),
paste("At Least ", successes[1], " Successes", sep = ""),
paste("Greater Than ", successes[1], " Successes", sep = ""),
paste("Between ", successes[1], " and ", successes[2], " Successes", sep = "")
)
return(results)
}
kevin_binom(n = 12, prob = .5, k = 11)
runApp('calculators.R')
?percent()
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
?icon
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
1 - pbinom(q = 400 - 1, size = 31250, prob = 0.01)
runApp('calculators.R')
pbinom(q = 0, size = 2, prob = 0.49)
pbinom(q = 0, size = 2, prob = 0.40)
pbinom(q = 0, size = 2, prob = 0.40)
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
?percent
library(scales)
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
runApp('calculators.R')
library(shiny); runApp('calculators.R')
?percent()
t = 0.01
t %>% percent(digits = 2)
t %>% percent(digits = 2, scale = 100)
t %>% percent(digits = 2)
t %>% percent()
t %>% percent()
runApp('calculators.R')
runApp('calculators.R')
t = 0.0101
t %>% percent()
t %>% percent(accuracy = 2)
t %>% percent(accuracy = 1)
t %>% percent(accuracy = 0.01)
percent(t, accuracy = 0.01)
percent(t, accuracy = 0.01)
label_percent(t, accuracy = 0.01)
label_percent(t, accuracy = 0.01)
t = 0.0101
label_percent(t, accuracy = 0.01)
label_percent(t)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
percent(t)
percent <- function(x, digits = 2, format = "g", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
percent(t)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
t = 0.0101
t = formatC(x, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
percent(t)
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
percent(t)
t = 0.01012
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
percent(t)
t = 0.010155
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
percent(t)
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
runApp('calculators.R')
?qbinom
k = 0:12
n = 12
p = 0.2
df = data.frame(x, px = dbinom(x = k, size = n, prob = p))
x = 0:12
n = 12
p = 0.2
df = data.frame(x, px = dbinom(x = x, size = n, prob = p))
ggplot(df, aes(x, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=",size,",","p=",prob,")"))
ggplot(df, aes(x, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=", n ,",","p=",p,")"))
k = 0:12
n = 12
p = 0.2
df = data.frame(k, px = dbinom(x = k, size = n, prob = p))
ggplot(df, aes(k, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom","(","trial size=", n ,",","p=",p,")"))
ggplot(df, aes(k, px)) +
geom_col(fill ="blue") +
xlab("x, number of successes") +
ylab("p(x)") +
labs(title = paste("dbinom", "(", "trial size=", n, ",", "p=", p, ")", sep = ""))
