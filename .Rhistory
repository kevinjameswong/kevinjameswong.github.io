#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt > 0 ~ 1, .default = 0)
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt = 0 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt = 0 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt > 0 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(sum(tt) = 0 ~ "Repeat Artist", .default = "New Artist")
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(sum(tt) == 0 ~ "Repeat Artist", .default = "New Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt == 0 ~ "Repeat Artist", .default = "New Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt == 0 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt <= 1 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray"))
TopArtists_ByYear %>%
ungroup() %>%
#arrange(desc(Year)) %>%
group_by(ArtistName) %>%
mutate(
tt = cumsum(case_when(
Song_Count > 0 ~ 1,
.default = 0
)
), ttt = case_when(tt <= 1 ~ "New Artist", .default = "Repeat Artist")
) %>%
filter(ArtistName %in% c("TWICE", "The Fray", "The Script"))
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
spotify = read.csv(file = "files/SpotifyWrapped.csv")
spotify =
spotify %>%
select(
Year,
Ranking,
Song,
Album,
Artist1,
Artist2,
Artist3,
Artist4,
Artist5,
Artist6,
SongID,
AlbumID,
Artist1ID,
Artist2ID,
Artist3ID,
Artist4ID,
Artist5ID,
Artist6ID,
ApproxGenre,
Album.Year,
Song.Length
)
spotify = spotify %>%
group_by(Year) %>%
mutate(
Score = max(row_number()) + 1 - row_number(),
Count = 1,
RecordInt = row_number()
) %>%
filter(Song != "")
names(spotify) = c("Year", "SongRanking", "Song", "Album", "ArtistName", "Artist2Name", "Artist3Name", "Artist4Name", "Artist5Name", "Artist6Name", "SongID", "AlbumID", "Artist1ID", "Artist2ID", "Artist3ID", "Artist4ID", "Artist5ID", "Artist6ID", "Genre", "AlbumYear", "SongLengthChar", "Score", "Count", "RecordInt")
str(spotify)
runApp('spotify.R')
runApp('spotify.R')
?icon()
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
runApp('spotify.R')
Update_Date = as.Date("03-30-2025", format = "%m-%d-%Y")
#Update_Date
library(dplyr)
library(gghighlight)
library(ggplot2)
library(kableExtra)
library(knitr)
library(lubridate)
library(rlang)
library(shiny)
library(shinydashboard)
library(stringr)
library(tidyverse)
Update_Date = as.Date("03-30-2025", format = "%m-%d-%Y")
#Update_Date
library(dplyr)
library(gghighlight)
library(ggplot2)
library(kableExtra)
library(knitr)
library(lubridate)
library(rlang)
library(shiny)
library(shinydashboard)
library(stringr)
library(tidyverse)
korean = read.csv(file = "files/koreanphrases.csv")
korean$Index = korean %>% nrow() %>% seq.int()
korean$Easy = ifelse(
test = is.na(korean$Easy),
yes = 0,
no = 1
)
korean = korean %>%
group_by(English, Korean, Romanization, Easy) %>%
mutate(count = n()) %>%
#filter(Romanization == "hwajangsil") %>%
mutate(TT = min(Index)) %>%
mutate(Duplicate = ifelse(TT == Index, 0, 1) %>% as.integer()) %>%
select(English, Korean, Romanization, Easy, Index, Duplicate) %>%
ungroup() %>%
filter(
English %>% str_to_lower() %>% str_sub(start = 1, end = 3) == "to ",
Korean %>% str_sub(start = Korean %>% str_length()) == "다",
Easy == 1)
korean = read.csv(file = "files/koreanphrases.csv")
korean$Index = korean %>% nrow() %>% seq.int()
korean$Easy = ifelse(
test = is.na(korean$Easy),
yes = 0,
no = 1
)
korean = korean %>%
group_by(English, Korean, Romanization, Easy) %>%
mutate(count = n()) %>%
#filter(Romanization == "hwajangsil") %>%
mutate(TT = min(Index)) %>%
mutate(Duplicate = ifelse(TT == Index, 0, 1) %>% as.integer()) %>%
select(English, Korean, Romanization, Easy, Index, Duplicate) %>%
ungroup() %>%
filter(
English %>% str_to_lower() %>% str_sub(start = 1, end = 3) == "to ",
Korean %>% str_sub(start = Korean %>% str_length()) == "다",
Easy == 1)
t = korean %>%
mutate(
Meaning = str_sub(string = Korean, start = 1, end = str_length(korean$Korean) - 1),
LastSyllable = str_sub(string = Korean, start = str_length(Korean) - 1, end = -2)
) %>%
select(English, Korean, Romanization, Index, Meaning, LastSyllable)
korean_syllables = read.csv(file = "files/korean_syllablelist.csv")
justlikeTT =
left_join(
x = t,
y = korean_syllables,
by = join_by(LastSyllable == Syllable)
)
justlikeTT
justlikeTT %>%
mutate(
Present = ifelse(
test = Character.Slot.2 %in% c("ㅏ", "ㅗ"),
yes = ifelse(
test = Character.Slot.3 == "",
yes = paste(Meaning, "요", sep = ""),
no = paste(Meaning, "아요", sep = "")
),
no = paste(Meaning, "어요", sep = "")
),
Past = ifelse(
test = Character.Slot.2 %in% c("ㅏ", "ㅗ"),
yes = ifelse(
test = Character.Slot.3 == "",
yes = paste(Meaning, "요", sep = ""),
no = paste(Meaning, "아요", sep = "")
),
no = paste(Meaning, "어요", sep = "")
),
Future = ifelse(
test = Character.Slot.2 %in% c("ㅏ", "ㅗ"),
yes = ifelse(
test = Character.Slot.3 == "",
yes = paste(Meaning, "요", sep = ""),
no = paste(Meaning, "아요", sep = "")
),
no = paste(Meaning, "어요", sep = "")
)
) %>%
select(English, Korean, Present, Past, Future)
justlikeTT %>%
mutate(
Present = case_when(
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(Meaning, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(Meaning, "아요", sep = ""),
.default = paste(Meaning, "어요", sep = "")
)
) %>%
select(English, Korean, Present)
justlikeTT
justlikeTT %>%
mutate(
Present = case_when(
LastSyllable %in% c("하") ~ paste(Meaning, "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(Meaning, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(Meaning, "아요", sep = ""),
.default = paste(Meaning, "어요", sep = "")
)
) %>%
select(English, Korean, Present)
justlikeTT
korean = read.csv(file = "files/koreanphrases.csv")
korean$Index = korean %>% nrow() %>% seq.int()
korean$Easy = ifelse(
test = is.na(korean$Easy),
yes = 0,
no = 1
)
korean = korean %>%
group_by(English, Korean, Romanization, Easy) %>%
mutate(count = n()) %>%
#filter(Romanization == "hwajangsil") %>%
mutate(TT = min(Index)) %>%
mutate(Duplicate = ifelse(TT == Index, 0, 1) %>% as.integer()) %>%
select(English, Korean, Romanization, Easy, Index, Duplicate) %>%
ungroup() %>%
filter(
English %>% str_to_lower() %>% str_sub(start = 1, end = 3) == "to ",
Korean %>% str_sub(start = Korean %>% str_length()) == "다",
Easy == 1)
t = korean %>%
mutate(
LastSyllable = str_sub(string = Korean, start = str_length(Korean) - 1, end = -2),
HaDa = case_when(
LastSyllable == "하" ~ 1,
.default = 0
),
Meaning = str_sub(string = Korean, start = 1, end = str_length(korean$Korean) - 1)
) %>%
select(English, Korean, Romanization, Index, Meaning, LastSyllable, HaDa)
korean_syllables = read.csv(file = "files/korean_syllablelist.csv")
justlikeTT =
left_join(
x = t,
y = korean_syllables,
by = join_by(LastSyllable == Syllable)
)
justlikeTT
t = korean %>%
mutate(
LastSyllable = str_sub(string = Korean, start = str_length(Korean) - 1, end = -2),
hada = case_when(
LastSyllable == "하" ~ 1,
.default = 0
),
Meaning = str_sub(string = Korean, start = 1, end = str_length(korean$Korean) - 1)
) %>%
select(English, Korean, Romanization, Index, Meaning, LastSyllable, hada)
korean_syllables = read.csv(file = "files/korean_syllablelist.csv")
justlikeTT =
left_join(
x = t,
y = korean_syllables,
by = join_by(LastSyllable == Syllable)
)
justlikeTT
t = korean %>%
mutate(
LastSyllable = str_sub(string = Korean, start = str_length(Korean) - 1, end = -2),
hada = case_when(
LastSyllable == "하" ~ 1,
.default = 0
),
VerbStem = str_sub(string = Korean, start = 1, end = str_length(korean$Korean) - 1)
) %>%
select(English, Korean, Romanization, Index, VerbStem, LastSyllable, hada)
korean_syllables = read.csv(file = "files/korean_syllablelist.csv")
justlikeTT =
left_join(
x = t,
y = korean_syllables,
by = join_by(LastSyllable == Syllable)
)
justlikeTT
str_sub(string = justlikeTT$VerbStem, start = 1, end = -1)
str_sub(string = justlikeTT$VerbStem, start = 1, end = -1)
str_sub(string = justlikeTT$VerbStem, start = 1, end = -2)
str_sub(string = justlikeTT$VerbStem, start = 1, end = 0)
str_sub(string = justlikeTT$VerbStem, start = 1, end = -1)
str_sub(string = justlikeTT$VerbStem, start = 1, end = -2)
justlikeTT
str_sub(string = justlikeTT$VerbStem, start = 1, end = -2)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = justlikeTT$VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(Meaning, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(Meaning, "아요", sep = ""),
.default = paste(Meaning, "어요", sep = "")
)
) %>%
select(English, Korean, Present)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
)
) %>%
select(English, Korean, Present)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
),
Past = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "했어요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
)
) %>%
select(English, Korean, Present, Past)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
),
Past = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "했어요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""), #mannada
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "었어요", sep = "")
)
) %>%
select(English, Korean, Present, Past)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
),
Past = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "했어요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "a어요", sep = ""), #mannada
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "었어요", sep = "")
)
) %>%
select(English, Korean, Present, Past)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
),
Past = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "했어요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "a어요", sep = ""), #mannada
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "았어요", sep = ""),
.default = paste(VerbStem, "었어요", sep = "")
)
) %>%
select(English, Korean, Present, Past)
justlikeTT %>%
mutate(
Present = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
),
Past = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "했어요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "a어요", sep = ""), #mannada, gasseoyo
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "았어요", sep = ""),
.default = paste(VerbStem, "었어요", sep = "")
),
Future = case_when(
hada == 1 ~ paste(str_sub(string = VerbStem, start = 1, end = -2), "해요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 == "" ~ paste(VerbStem, "요", sep = ""),
Character.Slot.2 %in% c("ㅏ", "ㅗ") & Character.Slot.3 != "" ~ paste(VerbStem, "아요", sep = ""),
.default = paste(VerbStem, "어요", sep = "")
)
) %>%
select(English, Korean, Present, Past)
library(shiny); runApp('korean_translator.R')
runApp('korean_translator.R')
library(shiny); runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('korean.R')
runApp('justlikeTTTTT.R')
runApp('justlikeTTTTT.R')
runApp('justlikeTTTTT.R')
library(shiny); runApp('justlikeTTTTT.R')
runApp('justlikeTTTTT.R')
runApp('justlikeTTTTT.R')
runApp('korean.R')
runApp('korean_translator.R')
