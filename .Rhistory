.default = `Question Number`
) %>% as.factor(),
`Trivia Half` = case_when(
Round %in% c("1", "2", "3") ~ "First Half",
Round %in% c("4", "5", "6") ~ "Second Half",
.default = `Question Number`
),
`Correct Answer` = `Correct Answer` %>% as.character(),
`Submitted Answer` = `Submitted Answer` %>% as.character(),
Points_Wagered_Original = `Points Wagered`,
Points_Scored_Original = case_when(
`Correct?` == 1  ~ Points_Wagered_Original,
.default = 0
),
Points_Wasted_Original = case_when(
`Correct?` == 0 ~ Points_Wagered_Original,
.default = 0
),
Points_Net_Original = case_when(
`Correct?` == 1 ~ Points_Wagered_Original,
.default = - Points_Wagered_Original
),
Points_Wagered_Weighted = case_when(
#`Trivia Half` == "First Half" ~ Points_Wagered_Original,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "2" ~ 1,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "4" ~ 3,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "6" ~ 5,
.default = Points_Wagered_Original
),
Points_Scored_Weighted = case_when(
`Correct?` == 1  ~ Points_Wagered_Weighted,
.default = 0
),
Points_Wasted_Weighted = case_when(
`Correct?` == 0 ~ Points_Wagered_Weighted,
.default = 0
),
Points_Net_Weighted = case_when(
`Correct?` == 1 ~ Points_Wagered_Weighted,
.default = - Points_Wagered_Weighted
),
Category_Level02 = case_when(
# make a grouping for business and advertising
str_detect(string = toupper(Category), pattern = "GEOGRAPHY|PARKS|LANDMARKS") == TRUE ~ "Geography",
str_detect(string = toupper(Category), pattern = "BASEBALL|BASKETBALL|BOWLING|BOXING|FOOTBALL|GOLF|HOCKEY|RUNNING|SOCCER|SPORTS") == TRUE ~ "Sports",
str_detect(string = toupper(Category), pattern = "LITERATURE|BOOKS") == TRUE ~ "Literature",
str_detect(string = toupper(Category), pattern = "HISTORY|PRESIDENTS") == TRUE ~ "History",
str_detect(string = toupper(Category), pattern = "MOVIES|MOVIE LINES") == TRUE ~ "Movies",
toupper(Category) == "TV" ~ "TV",
str_detect(string = toupper(Category), pattern = "TELEVISION") == TRUE ~ "TV",
toupper(Category) == "DOGS" ~ "Animals",
.default = "Other"
),
Category_Level03 = case_when(
Category_Level02 == "TV" ~ 1,
.default = 2
),
Freebie = case_when(
Freebie == 1 ~ 1,
.default = 0
)
) %>%
arrange(Index) %>%
select(Index, Date, `Question Number`, Round, `Question within Round`, `Trivia Half`, Category, Question, `Correct Answer`, `Submitted Answer`, `Correct?`, Points_Wagered_Original, Points_Scored_Original, Points_Wasted_Original, Points_Net_Original, Points_Wagered_Weighted, Points_Scored_Weighted, Points_Wasted_Weighted, Points_Net_Weighted, `Question Type`, Freebie, Notes, `Top 5 Finish`, Category_Level02, Category_Level03) %>%
filter(Round %in% c("Bonus", "Halftime", "Final", "Tiebreaker") == FALSE) %>%
left_join(y = Parts, b = "Date")
```
trivia
#Creating Train and Test sets
set.seed(seed = 3)
trivia_trn_index = sample(x = trivia$Index, size = nrow(trivia) * .7, replace = FALSE) %>% sort(decreasing = FALSE)
trivia_tst_index = trivia %>% filter(Index %in% trivia_trn_index == FALSE) %>% select(Index) %>% unlist() %>% unname() %>% sort(decreasing = FALSE)
trivia_trn = trivia %>% filter(Index %in% trivia_trn_index)
trivia_tst = trivia %>% filter(Index %in% trivia_tst_index)
rf_fit = train(`Correct?` ~ `Question Type` + Round + `Question within Round` + `Trivia Half` + Category + Category_Level02 + Freebie + Points_Wagered_Weighted + `# of People`,
data = trivia_trn,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5
)
tt$xlevels[["Category_Level02"]] = c(tt$xlevels[["Category_Level02"]], levels(trivia_tst[["Category_Level02"]]))
rf_fit$xlevels[["Category"]] = union(rf_fit$xlevels[["Category"]], trivia_tst$Category)
test_data_probabilities = predict(rf_fit,  newdata = trivia_tst)
trivia
trivia$`Correct?` %>% mean()
runApp('trivia.R')
runApp('trivia.R')
runApp('trivia.R')
trivia_trn
Update_Date = as.Date("05-01-2025", format = "%m-%d-%Y")
#Update_Date
library(dplyr)
library(gghighlight)
library(ggplot2)
library(googlesheets4)
library(kableExtra)
library(knitr)
library(lubridate)
library(rlang)
library(scales)
library(shiny)
library(shinydashboard)
library(stringr)
library(tidyverse)
library(randomForest)
library(generics)
library(caret)
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
gs4_deauth()
Parts = read_sheet(ss = "https://docs.google.com/spreadsheets/d/1k4vAQll8rTX4jHBNEOxlEYl1MEra502bfDBahPyEYQQ", sheet = "# of Participants")
trivia = read_sheet(ss = "https://docs.google.com/spreadsheets/d/1k4vAQll8rTX4jHBNEOxlEYl1MEra502bfDBahPyEYQQ", sheet = "Trivia Questions with Answers") %>%
filter(is.na(Date) == FALSE, is.na(Category) == FALSE, is.na(TeamAnswerCorrect) == FALSE) %>%
mutate(
Date = Date %>% as.Date(),
`Question Number` = `Question Number` %>% as.character() %>% as.factor(),
Round = case_when(
`Question Number` %in% c("1", "2", "3") ~ "1",
`Question Number` %in% c("4", "5", "6") ~ "2",
`Question Number` %in% c("7", "8", "9") ~ "3",
`Question Number` %in% c("Bonus") ~ "Bonus",
`Question Number` %in% c("Halftime") ~ "Halftime",
`Question Number` %in% c("11", "12", "13") ~ "4",
`Question Number` %in% c("14", "15", "16") ~ "5",
`Question Number` %in% c("17", "18", "19") ~ "6",
.default = `Question Number`
) %>% as.factor(),
`Question within Round` = case_when(
`Question Number` %in% c("1", "4", "7", "11", "14", "17") ~ "1",
`Question Number` %in% c("2", "5", "8", "12", "15", "18") ~ "2",
`Question Number` %in% c("3", "6", "9", "13", "16", "19") ~ "3",
`Question Number` %in% c("Bonus") ~ "Bonus",
`Question Number` %in% c("Halftime") ~ "Halftime",
.default = `Question Number`
) %>% as.factor(),
`Trivia Half` = case_when(
Round %in% c("1", "2", "3") ~ "First Half",
Round %in% c("4", "5", "6") ~ "Second Half",
.default = `Question Number`
),
`Correct Answer` = `Correct Answer` %>% as.character(),
`Submitted Answer` = `Submitted Answer` %>% as.character(),
Points_Wagered_Original = `Points Wagered`,
Points_Scored_Original = case_when(
TeamAnswerCorrect == 1  ~ Points_Wagered_Original,
.default = 0
),
Points_Wasted_Original = case_when(
TeamAnswerCorrect == 0 ~ Points_Wagered_Original,
.default = 0
),
Points_Net_Original = case_when(
TeamAnswerCorrect == 1 ~ Points_Wagered_Original,
.default = - Points_Wagered_Original
),
Points_Wagered_Weighted = case_when(
#`Trivia Half` == "First Half" ~ Points_Wagered_Original,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "2" ~ 1,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "4" ~ 3,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "6" ~ 5,
.default = Points_Wagered_Original
),
Points_Scored_Weighted = case_when(
TeamAnswerCorrect == 1  ~ Points_Wagered_Weighted,
.default = 0
),
Points_Wasted_Weighted = case_when(
TeamAnswerCorrect == 0 ~ Points_Wagered_Weighted,
.default = 0
),
Points_Net_Weighted = case_when(
TeamAnswerCorrect == 1 ~ Points_Wagered_Weighted,
.default = - Points_Wagered_Weighted
),
Category_Level02 = case_when(
# make a grouping for business and advertising
str_detect(string = toupper(Category), pattern = "GEOGRAPHY|PARKS|LANDMARKS") == TRUE ~ "Geography",
str_detect(string = toupper(Category), pattern = "BASEBALL|BASKETBALL|BOWLING|BOXING|FOOTBALL|GOLF|HOCKEY|RUNNING|SOCCER|SPORTS") == TRUE ~ "Sports",
str_detect(string = toupper(Category), pattern = "LITERATURE|BOOKS") == TRUE ~ "Literature",
str_detect(string = toupper(Category), pattern = "HISTORY|PRESIDENTS") == TRUE ~ "History",
str_detect(string = toupper(Category), pattern = "MOVIES|MOVIE LINES") == TRUE ~ "Movies",
toupper(Category) == "TV" ~ "TV",
str_detect(string = toupper(Category), pattern = "TELEVISION") == TRUE ~ "TV",
toupper(Category) == "DOGS" ~ "Animals",
.default = "Other"
),
Category_Level03 = case_when(
Category_Level02 == "TV" ~ 1,
.default = 2
),
Freebie = case_when(
Freebie == 1 ~ 1,
.default = 0
)
) %>%
arrange(Index) %>%
left_join(y = Parts, b = "Date") %>%
select(Index, Date, `Question Number`, Round, `Question within Round`, `Trivia Half`, Category, Question, `Correct Answer`, `Submitted Answer`, TeamAnswerCorrect, Points_Wagered_Original, Points_Scored_Original, Points_Wasted_Original, Points_Net_Original, Points_Wagered_Weighted, Points_Scored_Weighted, Points_Wasted_Weighted, Points_Net_Weighted, `Question Type`, Freebie, Notes, `Top 5 Finish`, Category_Level02, Category_Level03, `# of People`) %>%
filter(Round %in% c("Bonus", "Halftime", "Final", "Tiebreaker") == FALSE)
#Creating Train and Test sets
set.seed(seed = 3)
trivia_trn_index = sample(x = trivia$Index, size = nrow(trivia) * .7, replace = FALSE) %>% sort(decreasing = FALSE)
trivia_tst_index = trivia %>% filter(Index %in% trivia_trn_index == FALSE) %>% select(Index) %>% unlist() %>% unname() %>% sort(decreasing = FALSE)
trivia_trn = trivia %>% filter(Index %in% trivia_trn_index)
trivia_tst = trivia %>% filter(Index %in% trivia_tst_index)
rf_fit = train(TeamAnswerCorrect ~ `Question Type` + Round + `Question within Round` + `Trivia Half` + Category + Category_Level02 + Freebie + Points_Wagered_Weighted + `# of People`,
data = trivia_trn,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5
)
rf_fit$xlevels[["Category_Level02"]] = union(rf_fit$xlevels[["Category_Level02"]], trivia_tst$Category_Level02)
rf_fit$xlevels[["Category"]] = union(rf_fit$xlevels[["Category"]], trivia_tst$Category)
test_data_probabilities = predict(rf_fit,  newdata = trivia_tst)
cutoffs = seq(from = 0.5, to = 1, by = 0.01)
score_acc = rep(0, length(cutoffs))
score = function(actual, predicted) {
1   * sum(predicted == 0 & actual == 0) +
1   * sum(predicted == 1 & actual == 1) +
-1  * sum(predicted == 0 & actual == 1) +
-1  * sum(predicted == 1 & actual == 0)
}
# test cutoffs for accuracy tuned forest
for (c in test_data_probabilities) {
pred = ifelse(test_data_probabilities > 0.5, yes = 1, no = 0)
}
trivia_tst$prediction = pred
trivia_tst$model_accurate = case_when(
trivia_tst$prediction == trivia_tst$TeamAnswerCorrect ~ 1,
.default = 0
)
train5_int = sample(x = trivia_trn_index, size = 5, replace = FALSE)
train5_table = trivia_trn %>%
select(
Date, Category, Category_Level02, `Question Type`, Freebie, `# of People`, TeamAnswerCorrect
)
train5_table
train5_table = trivia_trn %>%
filter(Index %in% train5_int) %>%
select(
Date, Category, Category_Level02, `Question Type`, Freebie, `# of People`, TeamAnswerCorrect
)
train5_table
train5_table = trivia_trn %>%
filter(Index %in% train5_int) %>%
select(
Date, Category, `Question Type`, Freebie, `# of People`, TeamAnswerCorrect
)
train5_table
train5_int = sample(x = trivia_trn_index, size = 5, replace = FALSE)
train5_table = trivia_trn %>%
filter(Index %in% train5_int) %>%
select(
Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect
)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
?column_spec
runApp('korean.R')
runApp('spotify.R')
set.seed(seed = seed)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
set.seed(seed = seed)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
trivia_tst
trivia_tst %>%
filter(Index %in% test5_int)
trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
)
trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
Update_Date = as.Date("05-01-2025", format = "%m-%d-%Y")
#Update_Date
library(dplyr)
library(gghighlight)
library(ggplot2)
library(googlesheets4)
library(kableExtra)
library(knitr)
library(lubridate)
library(rlang)
library(scales)
library(shiny)
library(shinydashboard)
library(stringr)
library(tidyverse)
library(randomForest)
library(generics)
library(caret)
percent = function(x, digits = 2, format = "f", ...) {
t = formatC(x * 100, format = format, digits = digits, ...) %>% paste("%", sep = "")
return(t)
}
seed = 3
gs4_deauth()
Parts = read_sheet(ss = "https://docs.google.com/spreadsheets/d/1k4vAQll8rTX4jHBNEOxlEYl1MEra502bfDBahPyEYQQ", sheet = "# of Participants")
trivia = read_sheet(ss = "https://docs.google.com/spreadsheets/d/1k4vAQll8rTX4jHBNEOxlEYl1MEra502bfDBahPyEYQQ", sheet = "Trivia Questions with Answers") %>%
filter(is.na(Date) == FALSE, is.na(Category) == FALSE, is.na(TeamAnswerCorrect) == FALSE) %>%
mutate(
Date = Date %>% as.Date(),
`Question Number` = `Question Number` %>% as.character() %>% as.factor(),
Round = case_when(
`Question Number` %in% c("1", "2", "3") ~ "1",
`Question Number` %in% c("4", "5", "6") ~ "2",
`Question Number` %in% c("7", "8", "9") ~ "3",
`Question Number` %in% c("Bonus") ~ "Bonus",
`Question Number` %in% c("Halftime") ~ "Halftime",
`Question Number` %in% c("11", "12", "13") ~ "4",
`Question Number` %in% c("14", "15", "16") ~ "5",
`Question Number` %in% c("17", "18", "19") ~ "6",
.default = `Question Number`
) %>% as.factor(),
`Question within Round` = case_when(
`Question Number` %in% c("1", "4", "7", "11", "14", "17") ~ "1",
`Question Number` %in% c("2", "5", "8", "12", "15", "18") ~ "2",
`Question Number` %in% c("3", "6", "9", "13", "16", "19") ~ "3",
`Question Number` %in% c("Bonus") ~ "Bonus",
`Question Number` %in% c("Halftime") ~ "Halftime",
.default = `Question Number`
) %>% as.factor(),
`Trivia Half` = case_when(
Round %in% c("1", "2", "3") ~ "First Half",
Round %in% c("4", "5", "6") ~ "Second Half",
.default = `Question Number`
),
`Correct Answer` = `Correct Answer` %>% as.character(),
`Submitted Answer` = `Submitted Answer` %>% as.character(),
Points_Wagered_Original = `Points Wagered`,
Points_Scored_Original = case_when(
TeamAnswerCorrect == 1  ~ Points_Wagered_Original,
.default = 0
),
Points_Wasted_Original = case_when(
TeamAnswerCorrect == 0 ~ Points_Wagered_Original,
.default = 0
),
Points_Net_Original = case_when(
TeamAnswerCorrect == 1 ~ Points_Wagered_Original,
.default = - Points_Wagered_Original
),
Points_Wagered_Weighted = case_when(
#`Trivia Half` == "First Half" ~ Points_Wagered_Original,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "2" ~ 1,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "4" ~ 3,
`Trivia Half` == "Second Half" & Points_Wagered_Original == "6" ~ 5,
.default = Points_Wagered_Original
),
Points_Scored_Weighted = case_when(
TeamAnswerCorrect == 1  ~ Points_Wagered_Weighted,
.default = 0
),
Points_Wasted_Weighted = case_when(
TeamAnswerCorrect == 0 ~ Points_Wagered_Weighted,
.default = 0
),
Points_Net_Weighted = case_when(
TeamAnswerCorrect == 1 ~ Points_Wagered_Weighted,
.default = - Points_Wagered_Weighted
),
Category_Level02 = case_when(
# make a grouping for business and advertising
str_detect(string = toupper(Category), pattern = "GEOGRAPHY|PARKS|LANDMARKS") == TRUE ~ "Geography",
str_detect(string = toupper(Category), pattern = "BASEBALL|BASKETBALL|BOWLING|BOXING|FOOTBALL|GOLF|HOCKEY|RUNNING|SOCCER|SPORTS") == TRUE ~ "Sports",
str_detect(string = toupper(Category), pattern = "LITERATURE|BOOKS") == TRUE ~ "Literature",
str_detect(string = toupper(Category), pattern = "HISTORY|PRESIDENTS") == TRUE ~ "History",
str_detect(string = toupper(Category), pattern = "MOVIES|MOVIE LINES") == TRUE ~ "Movies",
toupper(Category) == "TV" ~ "TV",
str_detect(string = toupper(Category), pattern = "TELEVISION") == TRUE ~ "TV",
toupper(Category) == "DOGS" ~ "Animals",
.default = "Other"
),
Category_Level03 = case_when(
Category_Level02 == "TV" ~ 1,
.default = 2
),
Freebie = case_when(
Freebie == 1 ~ 1,
.default = 0
),
TeamAnswerCorrect_Text = case_when(
TeamAnswerCorrect == 1 ~ "Correct",
.default = "Incorrect"
),
) %>%
arrange(Index) %>%
left_join(y = Parts, b = "Date") %>%
select(Index, Date, `Question Number`, Round, `Question within Round`, `Trivia Half`, Category, Question, `Correct Answer`, `Submitted Answer`, TeamAnswerCorrect, Points_Wagered_Original, Points_Scored_Original, Points_Wasted_Original, Points_Net_Original, Points_Wagered_Weighted, Points_Scored_Weighted, Points_Wasted_Weighted, Points_Net_Weighted, `Question Type`, Freebie, Notes, `Top 5 Finish`, Category_Level02, Category_Level03, NumberofTeamMembers, TeamAnswerCorrect_Text) %>%
filter(Round %in% c("Bonus", "Halftime", "Final", "Tiebreaker") == FALSE)
#Creating Train and Test sets
set.seed(seed = 4)
trivia_trn_index = sample(x = trivia$Index, size = nrow(trivia) * .7, replace = FALSE) %>% sort(decreasing = FALSE)
trivia_tst_index = trivia %>% filter(Index %in% trivia_trn_index == FALSE) %>% select(Index) %>% unlist() %>% unname() %>% sort(decreasing = FALSE)
trivia_trn = trivia %>% filter(Index %in% trivia_trn_index)
trivia_tst = trivia %>% filter(Index %in% trivia_tst_index)
rf_fit = train(TeamAnswerCorrect ~ `Question Type` + Round + `Question within Round` + `Trivia Half` + Category + Category_Level02 + Freebie + Points_Wagered_Weighted + NumberofTeamMembers,
data = trivia_trn,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneLength = 5
)
rf_fit$xlevels[["Category_Level02"]] = union(rf_fit$xlevels[["Category_Level02"]], trivia_tst$Category_Level02)
rf_fit$xlevels[["Category"]] = union(rf_fit$xlevels[["Category"]], trivia_tst$Category)
test_data_probabilities = predict(rf_fit,  newdata = trivia_tst)
cutoffs = seq(from = 0.5, to = 1, by = 0.01)
score_acc = rep(0, length(cutoffs))
score = function(actual, predicted) {
1   * sum(predicted == 0 & actual == 0) +
1   * sum(predicted == 1 & actual == 1) +
-1  * sum(predicted == 0 & actual == 1) +
-1  * sum(predicted == 1 & actual == 0)
}
# test cutoffs for accuracy tuned forest
for (c in test_data_probabilities) {
pred = ifelse(test_data_probabilities > 0.5, yes = 1, no = 0)
}
trivia_tst$prediction = pred
trivia_tst$model_accurate = case_when(
trivia_tst$prediction == trivia_tst$TeamAnswerCorrect ~ 1,
.default = 0
)
set.seed(seed = seed)
train5_int = sample(x = trivia_trn_index, size = 10, replace = FALSE)
train5_table = trivia_trn %>%
filter(Index %in% train5_int) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text)
names(train5_table) = c("Date", "Category", "Question Type", "Freebie", "Team Members", "Team Answer Correct")
kable(train5_table, format = "html", align = "llllll") %>%
kable_styling(bootstrap_options = c("responsive"), full_width = TRUE) %>%
column_spec(column = c(1:ncol(train5_table)), background = "white", color = "black", include_thead = TRUE)
set.seed(seed = seed)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
names(test5_table) = c("Date", "Category", "Question Type", "Freebie", "Team Members", "Team Answer Correct", "Model Prediction of Team Answer", "Model Prediction Accuracy")
kable(test5_table, format = "html", align = "llllllll") %>%
kable_styling(bootstrap_options = c("responsive"), full_width = TRUE) %>%
column_spec(column = c(1:ncol(test5_table)), background = "white", color = "black", include_thead = TRUE) %>%
column_spec(column = 8, background = case_when(ModelPredictionAccuracy == "Accurate" ~ "green", .default = "white"), include_thead = FALSE)
kable(test5_table, format = "html", align = "llllllll") %>%
kable_styling(bootstrap_options = c("responsive"), full_width = TRUE) %>%
column_spec(column = c(1:ncol(test5_table)), background = "white", color = "black", include_thead = TRUE)
set.seed(seed = seed)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
names(test5_table) = c("Date", "Category", "Question Type", "Freebie", "Team Members", "Team Answer Correct", "Model Prediction of Team Answer", "Model Prediction Accuracy")
kable(test5_table, format = "html", align = "llllllll") %>%
kable_styling(bootstrap_options = c("responsive"), full_width = TRUE) %>%
column_spec(column = c(1:ncol(test5_table)), background = "white", color = "black", include_thead = TRUE) %>%
column_spec(column = 8, background = case_when(test5_table$`Model Prediction Accuracy` == "Accurate" ~ "green", .default = "white"), include_thead = FALSE)
set.seed(seed = seed)
test5_int = sample(x = trivia_tst_index, size = 5, replace = FALSE)
test5_table = trivia_tst %>%
filter(Index %in% test5_int) %>%
mutate(
ModelPredictionofTeamAnswer = ifelse(prediction == 1, "Correct", "Incorrect"),
ModelPredictionAccuracy     = ifelse(model_accurate == 1, "Accurate", "Inaccurate")
) %>%
select(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy) %>%
arrange(Date, Category, `Question Type`, Freebie, NumberofTeamMembers, TeamAnswerCorrect_Text, ModelPredictionofTeamAnswer, ModelPredictionAccuracy)
names(test5_table) = c("Date", "Category", "Question Type", "Freebie", "Team Members", "Team Answer Correct", "Model Prediction of Team Answer", "Model Prediction Accuracy")
kable(test5_table, format = "html", align = "llllllll") %>%
kable_styling(bootstrap_options = c("responsive"), full_width = TRUE) %>%
column_spec(column = c(1:ncol(test5_table)), background = "white", color = "black", include_thead = TRUE) %>%
column_spec(column = 8, background = case_when(test5_table$`Model Prediction Accuracy` == "Accurate" ~ "green", .default = "red"), include_thead = FALSE)
